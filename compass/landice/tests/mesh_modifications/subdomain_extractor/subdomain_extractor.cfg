[subdomain]

# path to file from which to extract subdomain
source_file = TO BE SUPPLIED BY USER

# path to region mask file for source_file
region_mask_file = TO BE SUPPLIED BY USER

# region number to extract
region_number = 1

# filename for the subdomain to be generated
dest_file_name = subdomain.nc

# mesh projection to be used for setting lat/lon values
# Should match the projection used in the source_file
# Likely one of 'ais-bedmap2' or 'gis-gimp'
mesh_projection = ais-bedmap2

# whether to extend mesh into the open ocean along the ice-shelf margin
# This is necessary if the region mask ends right along the ice-shelf edge,
# or if the ice-shelf is covered by two regions.
# It is recommended to try extracting a subdomain with this False, and if the
# ocean buffer is inadequate, trying again with this True.
extend_ocean_buffer = False

# number of iterations to grow open ocean buffer along ice-shelf margin
# Only used if extend_ocean_buffer is True
# Should be equal to approximately the number of ocean buffer cells in the
# source_file
grow_iters = 15

# method for performing interpolation
# 'ncremap' uses pyremap to call ESMF_RegridWeightGen to generate a
# nstd weight file and then uses ncremap to perform remapping.
# This method supports interpolating ancillary files (below)
# but likely needs to be run on a compute node and is more fragile.
# 'mali_interp' uses the MALI interpolation script interpolate_to_mpasli_grid.py
# This method does not support ancillary files but may be more robust
# and can likely be run quickly on a login node.
interp_method = ncremap

# optional forcing files that could also be interpolated
# e.g. SMB or TF files
# interpolating these files requires using the 'ncremap' interp_method
extra_file1 = None
extra_file2 = None
extra_file3 = None
extra_file4 = None
extra_file5 = None
