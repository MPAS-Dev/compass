trigger:
  branches:
    include:
    - master
    - legacy
  tags:
    include:
    - '*'
pr:
  branches:
    include:
    - master
    - legacy

jobs:
- job:
  displayName: linux
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      nompi:
        python.version: '3.9'
        mpi: 'nompi'
      openmpi:
        python.version: '3.9'
        mpi: 'openmpi'
      mpich:
        python.version: '3.9'
        mpi: 'mpich'

  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      conda config --add channels conda-forge
      conda config --set channel_priority strict
      conda install --yes python=$PYTHON_VERSION conda conda-build mamba boa
      conda update --all --yes
    displayName: Update conda base environment

  - bash: |
      eval "$(conda shell.bash hook)"
      conda mambabuild -m ci/mpi_$(mpi)_python${PYTHON_VERSION}.yaml conda/recipe
    displayName: Build COMPASS metapackage

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      mamba create --yes --quiet --name compass -c ${CONDA_PREFIX}/conda-bld/ \
          python=$PYTHON_VERSION compass  sphinx mock sphinx_rtd_theme m2r
    displayName: Create compass conda environment

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      conda activate compass

      compass list
      compass list --machines
      compass list --suites
      compass list --help
      compass setup --help
      compass suite --help
      compass clean --help
    displayName: Test compass

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      conda activate compass

      echo "source branch: $(Build.SourceBranch)"
      echo "repository: $(Build.Repository.Name)"

      tag=$(git describe --tags $(git rev-list --tags --max-count=1))
      echo "tag: $tag"

      REPO_PATH=$PWD

      if [[ "$(Build.SourceBranch)" == refs/tags/* ]]; then
        echo "this is a tag build"
        export DOCS_VERSION="$tag"
        deploy=True
        run=True
      elif [[ "$(Build.SourceBranch)" == refs/heads/* ]]; then
        branch="$(Build.SourceBranchName)"
        echo "this is a merge build of $branch"
        deploy=True
      elif [[ "$(Build.SourceBranch)" == refs/pull/*/merge ]]; then
        branch="$(System.PullRequest.TargetBranch)"
        echo "this is a pull request into $branch"
        deploy=False
      fi

      if [ -n ${branch} ]; then
        echo "This build is for branch $branch"
        if [[ ${branch} == "master" ]]; then
          export DOCS_VERSION="latest"
          run=True
        elif [[ ${branch} == "legacy" ]]; then
          export DOCS_VERSION="legacy"
          run=True
        else
          echo "We don't build docs for $branch"
          deploy=False
          run=False
        fi
      fi

      if [[ "${run}" == "False" ]]; then
        echo "Not building docs for branch ${branch}"
        exit 0
      fi

      echo "Docs version: $DOCS_VERSION"
      echo "Deploy to gh-pages? $deploy"
      cd docs || exit 1
      make html

      cd "$REPO_PATH" || exit 1

      if [[ "$deploy" == "False" ]]; then
        exit 0
      fi

      PUBLICATION_BRANCH=gh-pages
      DOCS_PATH="${DOCS_VERSION// /_}"
      # Checkout the branch
      pushd $HOME || exit 1
      git clone --branch=$PUBLICATION_BRANCH https://$(GitHubToken)@github.com/$(Build.Repository.Name) publish
      cd publish || exit 1

      # Update pages
      if [[ -d "$DOCS_PATH" ]]; then
        git rm -rf "$DOCS_PATH" > /dev/null
      fi
      mkdir "$DOCS_PATH"
      cp -r "$REPO_PATH"/docs/_build/html/* "$DOCS_PATH"
      # Commit and push latest version
      git add .
      if git diff-index --quiet HEAD; then
        echo "No changes in the docs."
      else
        git config --local user.name "Azure Pipelines"
        git config --local user.email "azuredevops@microsoft.com"
        git commit -m "[skip ci] Update $DOCS_VERSION"
        git push -fq origin $PUBLICATION_BRANCH
      fi
      popd || exit 1
    condition: eq(variables['mpi'], 'mpich')
    displayName: build and deploy docs



- job:
  displayName: osx
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      nompi:
        python.version: '3.9'
        mpi: 'nompi'
      openmpi:
        python.version: '3.9'
        mpi: 'openmpi'
      mpich:
        python.version: '3.9'
        mpi: 'mpich'

  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - bash: sudo chown -R 501:20 /usr/local/miniconda
    displayName: Fix permissions

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      conda config --add channels conda-forge
      conda config --set channel_priority strict
      conda install --yes python=$PYTHON_VERSION conda conda-build mamba boa
      conda update --all --yes
    displayName: Update conda base environment

  - bash: |
      eval "$(conda shell.bash hook)"
      conda mambabuild -m ci/mpi_$(mpi)_python${PYTHON_VERSION}.yaml conda/recipe
    displayName: Build COMPASS metapackage

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      mamba create --yes --quiet --name compass -c ${CONDA_PREFIX}/conda-bld/ \
          python=$PYTHON_VERSION compass
    displayName: Create compass conda environment

  - bash: |
      set -e
      eval "$(conda shell.bash hook)"
      conda activate compass

      compass list
      compass list --machines
      compass list --suites
      compass list --help
      compass setup --help
      compass suite --help
      compass clean --help
    displayName: Test compass

